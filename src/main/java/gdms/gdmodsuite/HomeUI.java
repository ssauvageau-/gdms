/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gdms.gdmodsuite;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;

/**
 *
 * @author cenorayd
 */
public class HomeUI extends javax.swing.JPanel implements Readyable {
    JTabbedPane parent;
    private javax.swing.JFileChooser fc;
    private final Properties prop;
    private String install_dir = "";
    private String working_dir = "";
    private final File file = new File("gdms.cfg");
    private final Path gdlist = Paths.get("gddb.cfg");
    private final List<javax.swing.JButton> tools;
    private boolean ready = false;

    /**
     * Creates new form HomeUI
     */
    public HomeUI(Properties pr, JTabbedPane jtp) {
        initComponents();
        this.parent = jtp;
        this.tools = new ArrayList<>();
        this.tools.add(amButton);
        this.tools.add(gdButton);
        this.tools.add(convButton);
        this.tools.add(modelButton);
        this.tools.add(psButton);
        this.tools.add(qstButton);
        this.tools.add(repairButton);
        this.tools.add(texButton);
        this.tools.add(worldButton);
        this.prop = pr;
        String t_install = this.prop.getProperty("install");
        if (t_install != null && !t_install.equals("")) {
            this.install_dir = t_install;
            if (this.prop.getProperty("gdx1") == null
                    || this.prop.getProperty("gdx2") == null
                    || this.prop.getProperty("gdx3") == null) {
                this.initButton.setEnabled(true);
                this.toggleTools(false);
            } else {
                this.initLabel.setVisible(true);
            }
            this.workdirButton.setEnabled(true);
        } else {
            this.toggleTools(false);
        }
        String t_work = this.prop.getProperty("working");
        if (t_work != null && !t_work.equals("")) {
            this.working_dir = t_work;
        }
    }

    private void toggleTools(boolean b) {
        for (javax.swing.JButton jb : this.tools) {
            jb.setEnabled(b);
        }
        if(ready) {
            this.parent.setEnabledAt(this.parent.indexOfTab("GDSearch"), b);
            this.readyFirst(GDSearch.class);
            this.parent.setEnabledAt(this.parent.indexOfTab("GDModChecker"), b);
            this.readyFirst(ModCheckUI.class);
            this.parent.setEnabledAt(this.parent.indexOfTab("GDModPruner"), b);
            this.readyFirst(ModPruneUI.class);
        }
    }
    
    private boolean readyFirst(Class<? extends Readyable> target) {
        Component first = Arrays.stream(this.parent.getComponents())
        .filter(JPanel.class::isInstance).map(JPanel.class::cast)
        .flatMap(j->Arrays.stream(j.getComponents()))
        .filter(target::isInstance)
        .findFirst().orElse(null);
        
        if(first == null) return false;
        target.cast(first).ready();
        return true;
    }
    
    @Override
    public void ready() {
        this.ready = true;
        this.toggleTools(this.amButton.isEnabled());
    }

    private void launch(String fn) {
        try {
            ProcessBuilder p = new ProcessBuilder(install_dir + "\\" + fn);
            p.start();

        } catch (IOException ex) {
            Logger.getLogger(HomeUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        amButton = new javax.swing.JButton();
        gdButton = new javax.swing.JButton();
        convButton = new javax.swing.JButton();
        modelButton = new javax.swing.JButton();
        repairButton = new javax.swing.JButton();
        worldButton = new javax.swing.JButton();
        psButton = new javax.swing.JButton();
        qstButton = new javax.swing.JButton();
        texButton = new javax.swing.JButton();
        GDLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        ModLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        DiscordButton = new javax.swing.JButton();
        installButton = new javax.swing.JButton();
        initButton = new javax.swing.JButton();
        initLabel = new javax.swing.JLabel();
        workdirButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(645, 323));

        amButton.setMnemonic(KeyEvent.VK_A);
        amButton.setText("Launch Asset Manager (ALT+A)");
        amButton.addActionListener((ActionEvent e) -> {
            launch("AssetManager.exe");
        });

        gdButton.setMnemonic(KeyEvent.VK_G);
        gdButton.setText("Launch Grim Dawn (ALT+G)");
        gdButton.addActionListener((ActionEvent e) -> {
            launch("Grim Dawn.exe");
        });

        convButton.setMnemonic(KeyEvent.VK_C);
        convButton.setText("Launch Conversation Editor (ALT+C)");
        convButton.addActionListener((ActionEvent e) -> {
            launch("ConversationEditor.exe");
        });

        modelButton.setMnemonic(KeyEvent.VK_M);
        modelButton.setText("Launch Model Viewer (ALT+M)");
        modelButton.addActionListener((ActionEvent e) -> {
            launch("Viewer.exe");
        });

        repairButton.setMnemonic(KeyEvent.VK_R);
        repairButton.setText("Launch Repair Process (ALT+R)");
        repairButton.addActionListener((ActionEvent e) -> {
            launch("Repair.exe");
        });

        worldButton.setMnemonic(KeyEvent.VK_W);
        worldButton.setText("Launch World Editor (ALT+W)");
        worldButton.addActionListener((ActionEvent e) -> {
            launch("Editor.exe");
        });

        psButton.setMnemonic(KeyEvent.VK_P);
        psButton.setText("Launch PSEditor (ALT+P)");
        psButton.addActionListener((ActionEvent e) -> {
            launch("PSEditor.exe");
        });

        qstButton.setMnemonic(KeyEvent.VK_Q);
        qstButton.setText("Launch Quest Editor (ALT+Q)");
        qstButton.addActionListener((ActionEvent e) -> {
            launch("QuestEditor.exe");
        });

        texButton.setMnemonic(KeyEvent.VK_T);
        texButton.setText("Launch TexViewer (ALT+T)");
        texButton.addActionListener((ActionEvent e) -> {
            launch("TexViewer.exe");
        });

        GDLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        GDLabel.setText("GD Mod Tools");

        jSeparator1.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator1.setForeground(new java.awt.Color(153, 153, 153));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        ModLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ModLabel.setText("Mod Suite Setup");

        jSeparator2.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator2.setForeground(new java.awt.Color(153, 153, 153));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        DiscordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Grim Dawn Discord Logo.png"))); // NOI18N
        DiscordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscordButtonActionPerformed(evt);
            }
        });

        installButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        installButton.setText("Set GD Install Directory");
        installButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installButtonActionPerformed(evt);
            }
        });

        initButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        initButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/appbar.cogs.png"))); // NOI18N
        initButton.setText("<html>Initialize<br>Mod Suite<br>Config</html>");
        initButton.setEnabled(false);
        initButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        initButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initButtonActionPerformed(evt);
            }
        });

        initLabel.setForeground(new java.awt.Color(255, 0, 51));
        initLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        initLabel.setText("<html>Install directory must be<br>set to initialize modding<br>suite configuration data.</html>");
        initLabel.setVisible(false);

        workdirButton.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        workdirButton.setText("<html><center><b>Optional</b>:<br>Set Custom Working Directory</center></html>");
        workdirButton.setEnabled(false);
        workdirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workdirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(psButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(gdButton))
                    .addComponent(convButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(repairButton)
                            .addComponent(modelButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(qstButton)
                                .addComponent(worldButton)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(texButton)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(GDLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(amButton)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiscordButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(ModLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(installButton)
                            .addComponent(workdirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(initLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(initButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)))))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(12, Short.MAX_VALUE)
                        .addComponent(GDLabel)
                        .addGap(18, 18, 18)
                        .addComponent(amButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gdButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(convButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(repairButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(worldButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qstButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(texButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(DiscordButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(ModLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(installButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(workdirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(initButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(initLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DiscordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscordButtonActionPerformed
        try {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create("https://discord.gg/8Dr8mge"));
        } catch (java.io.IOException e) {
        }
    }//GEN-LAST:event_DiscordButtonActionPerformed

    private void installButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installButtonActionPerformed
        this.fc = new javax.swing.JFileChooser("Select Grim Dawn Installation Directory");
        this.fc.setFileSelectionMode(1);
        String t_install = this.prop.getProperty("install");
        if (t_install != null && !t_install.equals("")) {
            this.install_dir = t_install;
            this.fc.setCurrentDirectory(new File(this.install_dir));
        }
        if (this.fc.showOpenDialog(this) == 0) {
            this.install_dir = this.fc.getSelectedFile().getAbsolutePath();
            this.prop.setProperty("install", this.install_dir);
            gdmsUtil.saveProperties(this.prop, this.file);
            this.initButton.setEnabled(true);
            this.initLabel.setVisible(false);
            this.workdirButton.setEnabled(true);
            this.toggleTools(false);
        }
    }//GEN-LAST:event_installButtonActionPerformed

    private void walkFiles() {
        List<String> master = new ArrayList<>();
        try {
            boolean useWork = (this.prop.getProperty("working") != null && !this.prop.getProperty("working").equals(""));
            if (this.prop.getProperty("install") != null && !this.prop.getProperty("install").equals("")) {
                String dbr = (useWork ? this.working_dir : this.install_dir) + "\\database";
                String res = (useWork ? this.working_dir : this.install_dir) + "\\resources";
                master.addAll(Files.walk(Paths.get(dbr)).filter(Files::isRegularFile).map(Path::toString).map(s -> s.replace(dbr, "")).map(s -> s.replace("\\", "/")).map(s -> s.replaceFirst("/", "")).map(s->s.toLowerCase()).collect(Collectors.toList()));
                master.addAll(Files.walk(Paths.get(res)).filter(Files::isRegularFile).map(Path::toString).map(s -> s.replace(res, "")).map(s -> s.replace("\\", "/")).map(s -> s.replaceFirst("/", "")).collect(Collectors.toList()));
            }
            for(int i = 1; i <= 3; i++) {
                if(this.prop.getProperty("gdx" + i) != null && this.prop.getProperty("gdx" + i).equals("1")) {
                    String dbr = (useWork ? this.working_dir : this.install_dir) + "\\mods\\gdx" + i + "\\database";
                    String res = (useWork ? this.working_dir : this.install_dir) + "\\mods\\gdx" + i + "\\resources";
                    master.addAll(Files.walk(Paths.get(dbr)).filter(Files::isRegularFile).map(Path::toString).map(s -> s.replace(dbr, "")).map(s -> s.replace("\\", "/")).map(s -> s.replaceFirst("/", "")).map(s->s.toLowerCase()).collect(Collectors.toList()));
                    master.addAll(Files.walk(Paths.get(res)).filter(Files::isRegularFile).map(Path::toString).map(s -> s.replace(res, "")).map(s -> s.replace("\\", "/")).map(s -> s.replaceFirst("/", "")).collect(Collectors.toList()));
                }
            }
            Files.write(this.gdlist, master, java.nio.charset.StandardCharsets.UTF_8);
        } catch (IOException ex) {}
    }

    private void initButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initButtonActionPerformed
        if (Files.exists(Paths.get(this.install_dir, "\\mods\\gdx1\\database"))) {
            this.prop.setProperty("gdx1", "1");
        } else {
            this.prop.setProperty("gdx1", "0");
        }
        if (Files.exists(Paths.get(this.install_dir, "\\mods\\gdx2\\database"))) {
            this.prop.setProperty("gdx2", "1");
        } else {
            this.prop.setProperty("gdx2", "0");
        }
        if (Files.exists(Paths.get(this.install_dir, "\\mods\\gdx3\\database"))) {
            this.prop.setProperty("gdx3", "1");
        } else {
            this.prop.setProperty("gdx3", "0");
        }
        gdmsUtil.saveProperties(this.prop, this.file);
        this.walkFiles();
        javax.swing.JOptionPane.showMessageDialog(
                null,
                "GDMS Config Files updated successfully.",
                "GDMS Version: " + this.prop.getProperty("gdms.version"),
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        this.initButton.setEnabled(false);
        this.initLabel.setVisible(false);
        this.toggleTools(true);
    }//GEN-LAST:event_initButtonActionPerformed

    private void workdirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workdirButtonActionPerformed
        this.fc = new javax.swing.JFileChooser("Select Custom Working Directory");
        this.fc.setFileSelectionMode(1);
        String t_working = this.prop.getProperty("working");
        if (t_working != null && !t_working.equals("")) {
            this.working_dir = t_working;
            this.fc.setCurrentDirectory(new File(this.working_dir));
        }
        if (this.fc.showOpenDialog(this) == 0) {
            this.working_dir = this.fc.getSelectedFile().getAbsolutePath();
            this.prop.setProperty("working", this.working_dir);
            gdmsUtil.saveProperties(this.prop, this.file);
            this.initButton.setEnabled(true);
            this.initLabel.setVisible(false);
            this.toggleTools(false);
        }
    }//GEN-LAST:event_workdirButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DiscordButton;
    private javax.swing.JLabel GDLabel;
    private javax.swing.JLabel ModLabel;
    private javax.swing.JButton amButton;
    private javax.swing.JButton convButton;
    private javax.swing.JButton gdButton;
    private javax.swing.JButton initButton;
    private javax.swing.JLabel initLabel;
    private javax.swing.JButton installButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton modelButton;
    private javax.swing.JButton psButton;
    private javax.swing.JButton qstButton;
    private javax.swing.JButton repairButton;
    private javax.swing.JButton texButton;
    private javax.swing.JButton workdirButton;
    private javax.swing.JButton worldButton;
    // End of variables declaration//GEN-END:variables
}
